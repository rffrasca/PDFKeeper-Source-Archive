<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckingVersion" xml:space="preserve">
    <value>Checking for a newer version of PDFKeeper...</value>
  </data>
  <data name="PdfSaved" xml:space="preserve">
    <value>{0} has been saved.</value>
  </data>
  <data name="DeleteChecked" xml:space="preserve">
    <value>Delete all checked documents?</value>
  </data>
  <data name="SelectWatchedFolderInfoPropEditor" xml:space="preserve">
    <value>Select the folder to be watched that will call the Information Properties Editor:</value>
  </data>
  <data name="EnableFolderWatcherInfoPropEditor" xml:space="preserve">
    <value>Enable the Information Properties Editor folder watcher?</value>
  </data>
  <data name="PdfDeleted" xml:space="preserve">
    <value>[PDF deleted]</value>
  </data>
  <data name="SearchTextUsageError" xml:space="preserve">
    <value>Database does not support the use of * as a wildcard character! Use % instead.  For more information, please consult the User Guide.</value>
  </data>
  <data name="PdfNotDeleted" xml:space="preserve">
    <value>[PDF not deleted]</value>
  </data>
  <data name="ImproperUsage" xml:space="preserve">
    <value>Improper use of operators and/or characters. For more information, please consult the User Guide.</value>
  </data>
  <data name="NewerVersionAvailable" xml:space="preserve">
    <value>A newer version of PDFKeeper is available</value>
  </data>
  <data name="OpenFileDialogTitleUpload" xml:space="preserve">
    <value>Select PDF File(s) to Upload</value>
  </data>
  <data name="DeleteAfterUploading" xml:space="preserve">
    <value>Do you want to delete {0} after being uploaded?

Note, having PDFKeeper delete the file after uploading is not recommended unless you have a backup or can easily reproduce the file.</value>
  </data>
  <data name="OpenFileDialogTitleEdit" xml:space="preserve">
    <value>Select PDF File(s) to Edit</value>
  </data>
  <data name="FolderWatcherInfoPropEditor" xml:space="preserve">
    <value>Information Properties Editor folder watcher</value>
  </data>
  <data name="UploadedResult" xml:space="preserve">
    <value>Uploaded {0} document(s), skipped {1} document(s).</value>
  </data>
  <data name="UploadingCounter" xml:space="preserve">
    <value>Uploading... ({0} of {1})</value>
  </data>
  <data name="HelpTitle" xml:space="preserve">
    <value>PDFKeeper Help</value>
  </data>
  <data name="PdfFailedDelete" xml:space="preserve">
    <value>[PDF failed to delete]</value>
  </data>
  <data name="DocumentNotesSavePrompt" xml:space="preserve">
    <value>The Document Notes text box contains unsaved data.  Do you want to save changes?</value>
  </data>
  <data name="ListViewCount" xml:space="preserve">
    <value>{0} document(s) found.</value>
  </data>
  <data name="SelectWatchedFolderUpload" xml:space="preserve">
    <value>Select the folder to be watched that will call the PDF Document Upload:</value>
  </data>
  <data name="EnableFolderWatcherUpload" xml:space="preserve">
    <value>Enable the PDF Document Upload folder watcher?</value>
  </data>
  <data name="UnableEnableFolderWatcher2" xml:space="preserve">
    <value>Unable to enable folder watcher.

Reason: the Information Properties Editor and Upload folder watchers cannot watch the same folder.</value>
  </data>
  <data name="PdfDocUpload" xml:space="preserve">
    <value>PDF Document Upload</value>
  </data>
  <data name="InfoPropEditor" xml:space="preserve">
    <value>Information Properties Editor</value>
  </data>
  <data name="StartErrorEvent" xml:space="preserve">
    <value>Start of error event</value>
  </data>
  <data name="EndErrorEvent" xml:space="preserve">
    <value>End of error event</value>
  </data>
  <data name="FolderWatcherUpload" xml:space="preserve">
    <value>PDF Document Upload folder watcher</value>
  </data>
  <data name="OkayToProcessFiles" xml:space="preserve">
    <value>{0} contains PDF documents that can be processed by the {1}.

Is it okay to process these files?</value>
  </data>
  <data name="ConfigureUploadWatcher" xml:space="preserve">
    <value>The PDF Document Upload folder watcher must be configured before it can be enabled.  Do you wish to configure the PDF Document Upload folder watcher?</value>
  </data>
  <data name="UnableEnableFolderWatcher1" xml:space="preserve">
    <value>Unable to enable folder watcher.

Reason: {0} cannot be a watched folder.</value>
  </data>
</root>